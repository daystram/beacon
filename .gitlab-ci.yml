stages:
  - build
  - image
  - chart

# ------------------------ beacon-be
build beacon-be:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:5.0
  script:
    - cd beacon-be
    - dotnet restore
    - dontnet build
  artifacts:
    paths:
      - beacon-be/bin

image dev beacon-be:
  stage: image
  image: docker:19.03.12
  needs: ["build beacon-be"]
  environment:
    name: development-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd beacon-be
    - docker build -t $CI_REGISTRY_IMAGE:be-dev .
    - docker push $CI_REGISTRY_IMAGE:be-dev
  when: manual
  only:
    - branches
  except:
    - main

image prod beacon-be:
  stage: image
  image: docker:19.03.12
  needs: ["build beacon-be"]
  environment:
    name: production-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd beacon-be
    - docker build -t $CI_REGISTRY_IMAGE:be -t $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:be
    - docker push $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ beacon-fe
build beacon-fe:
  stage: build
  image: node:lts-alpine
  script:
    - cd beacon-fe
    - yarn install
    - yarn build
  artifacts:
    paths:
      - beacon-fe/dist/

image dev beacon-fe:
  stage: image
  image: docker:19.03.12
  needs: ["build beacon-fe"]
  environment:
    name: development-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd beacon-fe
    - cp $VUE_ENV_FILE ./.env.production
    - docker build -t $CI_REGISTRY_IMAGE:fe-dev .
    - docker push $CI_REGISTRY_IMAGE:fe-dev
  when: manual
  only:
    - branches
  except:
    - main

image prod beacon-fe:
  stage: image
  image: docker:19.03.12
  needs: ["build beacon-fe"]
  environment:
    name: production-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd beacon-fe
    - cp $VUE_ENV_FILE  ./.env.production
    - docker build -t $CI_REGISTRY_IMAGE:fe -t $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:fe
    - docker push $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ chart
chart dev beacon:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image dev beacon-be", "image dev beacon-fe"]
  variables:
    APPLICATION_NAME: "beacon"
    APPLICATION_VERSION: "v0.0.0-development"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - branches
  except:
    - main

chart prod beacon:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image prod beacon-be", "image prod beacon-fe"]
  variables:
    APPLICATION_NAME: "beacon"
    APPLICATION_VERSION: "$CI_COMMIT_TAG"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - tags
